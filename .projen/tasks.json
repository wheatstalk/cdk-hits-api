{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets"
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "node .projenrc.js"
        }
      ]
    },
    "deploy": {
      "name": "deploy",
      "description": "Deploys your CDK app to the AWS cloud",
      "steps": [
        {
          "exec": "cdk deploy"
        }
      ]
    },
    "destroy": {
      "name": "destroy",
      "description": "Destroys your cdk app in the AWS cloud",
      "steps": [
        {
          "exec": "cdk destroy"
        }
      ]
    },
    "diff": {
      "name": "diff",
      "description": "Diffs the currently deployed app against your code",
      "steps": [
        {
          "exec": "cdk diff"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js"
        }
      ]
    },
    "integ:main:assert": {
      "name": "integ:main:assert",
      "description": "assert the snapshot of integration test 'main'",
      "steps": [
        {
          "exec": "[ -d \"test/main.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'main'. Run 'projen integ:main:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/main.integ.ts\" --no-version-reporting --no-path-metadata --no-asset-metadata -o test/.tmp/main.integ/synth.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/main.integ.snapshot/ test/.tmp/main.integ/synth.cdk.out/"
        }
      ]
    },
    "integ:main:deploy": {
      "name": "integ:main:deploy",
      "description": "deploy integration test 'main' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/.tmp/main.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/main.integ.ts\" --no-version-reporting --no-path-metadata --no-asset-metadata '**' --require-approval=never -o test/.tmp/main.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/main.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/main.integ/deploy.cdk.out test/main.integ.snapshot"
        },
        {
          "spawn": "integ:main:destroy"
        }
      ]
    },
    "integ:main:destroy": {
      "name": "integ:main:destroy",
      "description": "destroy integration test 'main'",
      "steps": [
        {
          "exec": "cdk destroy --app test/main.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:main:snapshot": {
      "name": "integ:main:snapshot",
      "description": "update snapshot for integration test \"main\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/main.integ.ts\" --no-version-reporting --no-path-metadata --no-asset-metadata -o test/main.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:main:watch": {
      "name": "integ:main:watch",
      "description": "watch integration test 'main' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/main.integ.ts\" --no-version-reporting --no-path-metadata --no-asset-metadata '**' -o test/.tmp/main.integ/deploy.cdk.out"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "synth:silent"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies",
      "steps": [
        {
          "spawn": "integ:main:snapshot"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "synth": {
      "name": "synth",
      "description": "Synthesizes your cdk app into cdk.out",
      "steps": [
        {
          "exec": "cdk synth"
        }
      ]
    },
    "synth:silent": {
      "name": "synth:silent",
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \"yarn build\")",
      "steps": [
        {
          "exec": "cdk synth > /dev/null"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot"
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ:main:assert"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @types/aws-lambda @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk esbuild eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit json-schema npm-check-updates ts-jest ts-node typescript @aws-cdk/aws-apigatewayv2-alpha @aws-cdk/aws-apigatewayv2-integrations-alpha aws-cdk-lib aws-sdk cdk-watchful constructs"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "upgrade-projen": {
      "name": "upgrade-projen",
      "description": "upgrade projen",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade projen"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "steps": [
        {
          "exec": "cdk deploy --hotswap"
        },
        {
          "exec": "cdk watch"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
